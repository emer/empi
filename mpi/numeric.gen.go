// Code generated by numeric.gen.go.tmpl. DO NOT EDIT.

// Copyright (c) 2020, The Emergent Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build mpi

package mpi

/*
#cgo pkg-config: ompi
#include "mpi.h"

MPI_Datatype FLOAT64   = MPI_DOUBLE;
MPI_Datatype FLOAT32   = MPI_FLOAT;
MPI_Datatype INT64     = MPI_LONG;
MPI_Datatype UINT64    = MPI_UNSIGNED_LONG;
MPI_Datatype INT32     = MPI_INT;
MPI_Datatype UINT32    = MPI_UNSIGNED;
MPI_Datatype INT16     = MPI_SHORT;
MPI_Datatype UINT16    = MPI_UNSIGNED_SHORT;
MPI_Datatype BYTE      = MPI_BYTE;
MPI_Datatype COMPLEX128 = MPI_DOUBLE_COMPLEX;
MPI_Datatype COMPLEX64  = MPI_COMPLEX;
MPI_Status*  StIgnore   = MPI_STATUS_IGNORE;
*/
import "C"

import (
	"unsafe"
)

// SendF64 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendF64(toProc int, tag int, vals []float64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.FLOAT64, C.int(toProc), C.int(tag), cm.comm), "SendF64")
}

// Recv64F64 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvF64(fmProc int, tag int, vals []float64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.FLOAT64, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvF64")
}

// BcastF64 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastF64(fmProc int, vals []float64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.FLOAT64, C.int(fmProc), cm.comm), "BcastF64")
}

// ReduceF64 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceF64(toProc int, op Op, dest, orig []float64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.FLOAT64, op.ToC(), C.int(toProc), cm.comm), "ReduceF64")
}

// AllReduceF64 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceF64(op Op, dest, orig []float64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.FLOAT64, op.ToC(), cm.comm), "AllReduceF64")
}

// GatherF64 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherF64(toProc int, dest, orig []float64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.FLOAT64, recvbuf, C.int(len(orig)), C.FLOAT64, C.int(toProc), cm.comm), "GatherF64")
}

// AllGatherF64 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherF64(dest, orig []float64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.FLOAT64, recvbuf, C.int(len(orig)), C.FLOAT64, cm.comm), "GatherF64")
}

// ScatterF64 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterF64(fmProc int, dest, orig []float64) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.FLOAT64, recvbuf, C.int(len(dest)), C.FLOAT64, C.int(fmProc), cm.comm), "GatherF64")
}

// SendF32 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendF32(toProc int, tag int, vals []float32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.FLOAT32, C.int(toProc), C.int(tag), cm.comm), "SendF32")
}

// Recv64F32 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvF32(fmProc int, tag int, vals []float32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.FLOAT32, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvF32")
}

// BcastF32 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastF32(fmProc int, vals []float32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.FLOAT32, C.int(fmProc), cm.comm), "BcastF32")
}

// ReduceF32 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceF32(toProc int, op Op, dest, orig []float32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.FLOAT32, op.ToC(), C.int(toProc), cm.comm), "ReduceF32")
}

// AllReduceF32 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceF32(op Op, dest, orig []float32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.FLOAT32, op.ToC(), cm.comm), "AllReduceF32")
}

// GatherF32 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherF32(toProc int, dest, orig []float32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.FLOAT32, recvbuf, C.int(len(orig)), C.FLOAT32, C.int(toProc), cm.comm), "GatherF32")
}

// AllGatherF32 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherF32(dest, orig []float32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.FLOAT32, recvbuf, C.int(len(orig)), C.FLOAT32, cm.comm), "GatherF32")
}

// ScatterF32 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterF32(fmProc int, dest, orig []float32) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.FLOAT32, recvbuf, C.int(len(dest)), C.FLOAT32, C.int(fmProc), cm.comm), "GatherF32")
}

// SendInt sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendInt(toProc int, tag int, vals []int) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.INT64, C.int(toProc), C.int(tag), cm.comm), "SendInt")
}

// Recv64Int receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvInt(fmProc int, tag int, vals []int) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.INT64, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvInt")
}

// BcastInt broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastInt(fmProc int, vals []int) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.INT64, C.int(fmProc), cm.comm), "BcastInt")
}

// ReduceInt reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceInt(toProc int, op Op, dest, orig []int) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.INT64, op.ToC(), C.int(toProc), cm.comm), "ReduceInt")
}

// AllReduceInt reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceInt(op Op, dest, orig []int) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.INT64, op.ToC(), cm.comm), "AllReduceInt")
}

// GatherInt gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherInt(toProc int, dest, orig []int) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.INT64, recvbuf, C.int(len(orig)), C.INT64, C.int(toProc), cm.comm), "GatherInt")
}

// AllGatherInt gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherInt(dest, orig []int) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.INT64, recvbuf, C.int(len(orig)), C.INT64, cm.comm), "GatherInt")
}

// ScatterInt scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterInt(fmProc int, dest, orig []int) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.INT64, recvbuf, C.int(len(dest)), C.INT64, C.int(fmProc), cm.comm), "GatherInt")
}

// SendI64 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendI64(toProc int, tag int, vals []int64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.INT64, C.int(toProc), C.int(tag), cm.comm), "SendI64")
}

// Recv64I64 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvI64(fmProc int, tag int, vals []int64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.INT64, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvI64")
}

// BcastI64 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastI64(fmProc int, vals []int64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.INT64, C.int(fmProc), cm.comm), "BcastI64")
}

// ReduceI64 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceI64(toProc int, op Op, dest, orig []int64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.INT64, op.ToC(), C.int(toProc), cm.comm), "ReduceI64")
}

// AllReduceI64 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceI64(op Op, dest, orig []int64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.INT64, op.ToC(), cm.comm), "AllReduceI64")
}

// GatherI64 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherI64(toProc int, dest, orig []int64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.INT64, recvbuf, C.int(len(orig)), C.INT64, C.int(toProc), cm.comm), "GatherI64")
}

// AllGatherI64 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherI64(dest, orig []int64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.INT64, recvbuf, C.int(len(orig)), C.INT64, cm.comm), "GatherI64")
}

// ScatterI64 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterI64(fmProc int, dest, orig []int64) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.INT64, recvbuf, C.int(len(dest)), C.INT64, C.int(fmProc), cm.comm), "GatherI64")
}

// SendU64 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendU64(toProc int, tag int, vals []uint64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.UINT64, C.int(toProc), C.int(tag), cm.comm), "SendU64")
}

// Recv64U64 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvU64(fmProc int, tag int, vals []uint64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.UINT64, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvU64")
}

// BcastU64 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastU64(fmProc int, vals []uint64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.UINT64, C.int(fmProc), cm.comm), "BcastU64")
}

// ReduceU64 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceU64(toProc int, op Op, dest, orig []uint64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.UINT64, op.ToC(), C.int(toProc), cm.comm), "ReduceU64")
}

// AllReduceU64 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceU64(op Op, dest, orig []uint64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.UINT64, op.ToC(), cm.comm), "AllReduceU64")
}

// GatherU64 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherU64(toProc int, dest, orig []uint64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.UINT64, recvbuf, C.int(len(orig)), C.UINT64, C.int(toProc), cm.comm), "GatherU64")
}

// AllGatherU64 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherU64(dest, orig []uint64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.UINT64, recvbuf, C.int(len(orig)), C.UINT64, cm.comm), "GatherU64")
}

// ScatterU64 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterU64(fmProc int, dest, orig []uint64) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.UINT64, recvbuf, C.int(len(dest)), C.UINT64, C.int(fmProc), cm.comm), "GatherU64")
}

// SendI32 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendI32(toProc int, tag int, vals []int32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.INT32, C.int(toProc), C.int(tag), cm.comm), "SendI32")
}

// Recv64I32 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvI32(fmProc int, tag int, vals []int32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.INT32, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvI32")
}

// BcastI32 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastI32(fmProc int, vals []int32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.INT32, C.int(fmProc), cm.comm), "BcastI32")
}

// ReduceI32 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceI32(toProc int, op Op, dest, orig []int32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.INT32, op.ToC(), C.int(toProc), cm.comm), "ReduceI32")
}

// AllReduceI32 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceI32(op Op, dest, orig []int32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.INT32, op.ToC(), cm.comm), "AllReduceI32")
}

// GatherI32 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherI32(toProc int, dest, orig []int32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.INT32, recvbuf, C.int(len(orig)), C.INT32, C.int(toProc), cm.comm), "GatherI32")
}

// AllGatherI32 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherI32(dest, orig []int32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.INT32, recvbuf, C.int(len(orig)), C.INT32, cm.comm), "GatherI32")
}

// ScatterI32 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterI32(fmProc int, dest, orig []int32) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.INT32, recvbuf, C.int(len(dest)), C.INT32, C.int(fmProc), cm.comm), "GatherI32")
}

// SendU32 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendU32(toProc int, tag int, vals []uint32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.UINT32, C.int(toProc), C.int(tag), cm.comm), "SendU32")
}

// Recv64U32 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvU32(fmProc int, tag int, vals []uint32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.UINT32, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvU32")
}

// BcastU32 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastU32(fmProc int, vals []uint32) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.UINT32, C.int(fmProc), cm.comm), "BcastU32")
}

// ReduceU32 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceU32(toProc int, op Op, dest, orig []uint32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.UINT32, op.ToC(), C.int(toProc), cm.comm), "ReduceU32")
}

// AllReduceU32 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceU32(op Op, dest, orig []uint32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.UINT32, op.ToC(), cm.comm), "AllReduceU32")
}

// GatherU32 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherU32(toProc int, dest, orig []uint32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.UINT32, recvbuf, C.int(len(orig)), C.UINT32, C.int(toProc), cm.comm), "GatherU32")
}

// AllGatherU32 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherU32(dest, orig []uint32) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.UINT32, recvbuf, C.int(len(orig)), C.UINT32, cm.comm), "GatherU32")
}

// ScatterU32 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterU32(fmProc int, dest, orig []uint32) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.UINT32, recvbuf, C.int(len(dest)), C.UINT32, C.int(fmProc), cm.comm), "GatherU32")
}

// SendI16 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendI16(toProc int, tag int, vals []int16) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.INT16, C.int(toProc), C.int(tag), cm.comm), "SendI16")
}

// Recv64I16 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvI16(fmProc int, tag int, vals []int16) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.INT16, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvI16")
}

// BcastI16 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastI16(fmProc int, vals []int16) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.INT16, C.int(fmProc), cm.comm), "BcastI16")
}

// ReduceI16 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceI16(toProc int, op Op, dest, orig []int16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.INT16, op.ToC(), C.int(toProc), cm.comm), "ReduceI16")
}

// AllReduceI16 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceI16(op Op, dest, orig []int16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.INT16, op.ToC(), cm.comm), "AllReduceI16")
}

// GatherI16 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherI16(toProc int, dest, orig []int16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.INT16, recvbuf, C.int(len(orig)), C.INT16, C.int(toProc), cm.comm), "GatherI16")
}

// AllGatherI16 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherI16(dest, orig []int16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.INT16, recvbuf, C.int(len(orig)), C.INT16, cm.comm), "GatherI16")
}

// ScatterI16 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterI16(fmProc int, dest, orig []int16) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.INT16, recvbuf, C.int(len(dest)), C.INT16, C.int(fmProc), cm.comm), "GatherI16")
}

// SendU16 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendU16(toProc int, tag int, vals []uint16) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.UINT16, C.int(toProc), C.int(tag), cm.comm), "SendU16")
}

// Recv64U16 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvU16(fmProc int, tag int, vals []uint16) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.UINT16, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvU16")
}

// BcastU16 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastU16(fmProc int, vals []uint16) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.UINT16, C.int(fmProc), cm.comm), "BcastU16")
}

// ReduceU16 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceU16(toProc int, op Op, dest, orig []uint16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.UINT16, op.ToC(), C.int(toProc), cm.comm), "ReduceU16")
}

// AllReduceU16 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceU16(op Op, dest, orig []uint16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.UINT16, op.ToC(), cm.comm), "AllReduceU16")
}

// GatherU16 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherU16(toProc int, dest, orig []uint16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.UINT16, recvbuf, C.int(len(orig)), C.UINT16, C.int(toProc), cm.comm), "GatherU16")
}

// AllGatherU16 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherU16(dest, orig []uint16) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.UINT16, recvbuf, C.int(len(orig)), C.UINT16, cm.comm), "GatherU16")
}

// ScatterU16 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterU16(fmProc int, dest, orig []uint16) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.UINT16, recvbuf, C.int(len(dest)), C.UINT16, C.int(fmProc), cm.comm), "GatherU16")
}

// SendI8 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendI8(toProc int, tag int, vals []int8) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.BYTE, C.int(toProc), C.int(tag), cm.comm), "SendI8")
}

// Recv64I8 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvI8(fmProc int, tag int, vals []int8) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.BYTE, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvI8")
}

// BcastI8 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastI8(fmProc int, vals []int8) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.BYTE, C.int(fmProc), cm.comm), "BcastI8")
}

// ReduceI8 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceI8(toProc int, op Op, dest, orig []int8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.BYTE, op.ToC(), C.int(toProc), cm.comm), "ReduceI8")
}

// AllReduceI8 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceI8(op Op, dest, orig []int8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.BYTE, op.ToC(), cm.comm), "AllReduceI8")
}

// GatherI8 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherI8(toProc int, dest, orig []int8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.BYTE, recvbuf, C.int(len(orig)), C.BYTE, C.int(toProc), cm.comm), "GatherI8")
}

// AllGatherI8 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherI8(dest, orig []int8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.BYTE, recvbuf, C.int(len(orig)), C.BYTE, cm.comm), "GatherI8")
}

// ScatterI8 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterI8(fmProc int, dest, orig []int8) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.BYTE, recvbuf, C.int(len(dest)), C.BYTE, C.int(fmProc), cm.comm), "GatherI8")
}

// SendU8 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendU8(toProc int, tag int, vals []uint8) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.BYTE, C.int(toProc), C.int(tag), cm.comm), "SendU8")
}

// Recv64U8 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvU8(fmProc int, tag int, vals []uint8) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.BYTE, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvU8")
}

// BcastU8 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastU8(fmProc int, vals []uint8) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.BYTE, C.int(fmProc), cm.comm), "BcastU8")
}

// ReduceU8 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceU8(toProc int, op Op, dest, orig []uint8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.BYTE, op.ToC(), C.int(toProc), cm.comm), "ReduceU8")
}

// AllReduceU8 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceU8(op Op, dest, orig []uint8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.BYTE, op.ToC(), cm.comm), "AllReduceU8")
}

// GatherU8 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherU8(toProc int, dest, orig []uint8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.BYTE, recvbuf, C.int(len(orig)), C.BYTE, C.int(toProc), cm.comm), "GatherU8")
}

// AllGatherU8 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherU8(dest, orig []uint8) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.BYTE, recvbuf, C.int(len(orig)), C.BYTE, cm.comm), "GatherU8")
}

// ScatterU8 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterU8(fmProc int, dest, orig []uint8) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.BYTE, recvbuf, C.int(len(dest)), C.BYTE, C.int(fmProc), cm.comm), "GatherU8")
}

// SendC128 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendC128(toProc int, tag int, vals []complex128) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.COMPLEX128, C.int(toProc), C.int(tag), cm.comm), "SendC128")
}

// Recv64C128 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvC128(fmProc int, tag int, vals []complex128) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.COMPLEX128, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvC128")
}

// BcastC128 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastC128(fmProc int, vals []complex128) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.COMPLEX128, C.int(fmProc), cm.comm), "BcastC128")
}

// ReduceC128 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceC128(toProc int, op Op, dest, orig []complex128) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.COMPLEX128, op.ToC(), C.int(toProc), cm.comm), "ReduceC128")
}

// AllReduceC128 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceC128(op Op, dest, orig []complex128) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.COMPLEX128, op.ToC(), cm.comm), "AllReduceC128")
}

// GatherC128 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherC128(toProc int, dest, orig []complex128) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.COMPLEX128, recvbuf, C.int(len(orig)), C.COMPLEX128, C.int(toProc), cm.comm), "GatherC128")
}

// AllGatherC128 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherC128(dest, orig []complex128) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.COMPLEX128, recvbuf, C.int(len(orig)), C.COMPLEX128, cm.comm), "GatherC128")
}

// ScatterC128 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterC128(fmProc int, dest, orig []complex128) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.COMPLEX128, recvbuf, C.int(len(dest)), C.COMPLEX128, C.int(fmProc), cm.comm), "GatherC128")
}

// SendC64 sends values to toProc, using given unique tag identifier.
// This is Blocking. Must have a corresponding Recv call with same tag on toProc, from this proc
func (cm *Comm) SendC64(toProc int, tag int, vals []complex64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Send(buf, C.int(len(vals)), C.COMPLEX64, C.int(toProc), C.int(tag), cm.comm), "SendC64")
}

// Recv64C64 receives values from proc fmProc, using given unique tag identifier
// This is Blocking. Must have a corresponding Send call with same tag on fmProc, to this proc
func (cm *Comm) RecvC64(fmProc int, tag int, vals []complex64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Recv(buf, C.int(len(vals)), C.COMPLEX64, C.int(fmProc), C.int(tag), cm.comm, C.StIgnore), "RecvC64")
}

// BcastC64 broadcasts slice from fmProc to all other procs.
// All nodes have the same vals after this call, copied from fmProc.
func (cm *Comm) BcastC64(fmProc int, vals []complex64) error {
	buf := unsafe.Pointer(&vals[0])
	return Error(C.MPI_Bcast(buf, C.int(len(vals)), C.COMPLEX64, C.int(fmProc), cm.comm), "BcastC64")
}

// ReduceC64 reduces all values across procs to toProc in orig to dest using given operation.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ReduceC64(toProc int, op Op, dest, orig []complex64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Reduce(sendbuf, recvbuf, C.int(len(dest)), C.COMPLEX64, op.ToC(), C.int(toProc), cm.comm), "ReduceC64")
}

// AllReduceC64 reduces all values across procs to all procs from orig into dest using given operation.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllReduceC64(op Op, dest, orig []complex64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allreduce(sendbuf, recvbuf, C.int(len(dest)), C.COMPLEX64, op.ToC(), cm.comm), "AllReduceC64")
}

// GatherC64 gathers values from all procs into toProc proc, tiled into dest of size np * len(orig).
// This is inverse of Scatter.
// recvbuf is ignored on all procs except toProc.
// IMPORTANT: orig and dest must be different slices.
func (cm *Comm) GatherC64(toProc int, dest, orig []complex64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	if recvbuf != nil {
		recvbuf := unsafe.Pointer(&dest[0])
	}
	return Error(C.MPI_Gather(sendbuf, C.int(len(orig)), C.COMPLEX64, recvbuf, C.int(len(orig)), C.COMPLEX64, C.int(toProc), cm.comm), "GatherC64")
}

// AllGatherC64 gathers values from all procs into all procs,
// tiled by proc into dest of size np * len(orig).
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) AllGatherC64(dest, orig []complex64) error {
	sendbuf := unsafe.Pointer(&orig[0])
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Allgather(sendbuf, C.int(len(orig)), C.COMPLEX64, recvbuf, C.int(len(orig)), C.COMPLEX64, cm.comm), "GatherC64")
}

// ScatterC64 scatters values from fmProc to all procs, distributing len(dest) size chunks to
// each proc from orig slice, which must be of size np * len(dest).  This is inverse of Gather.
// sendbuf is ignored on all procs except fmProc.
// IMPORTANT: orig and dest must be different slices
func (cm *Comm) ScatterC64(fmProc int, dest, orig []complex64) error {
	if sendbuf != nil {
		sendbuf := unsafe.Pointer(&orig[0])
	}
	recvbuf := unsafe.Pointer(&dest[0])
	return Error(C.MPI_Scatter(sendbuf, C.int(len(dest)), C.COMPLEX64, recvbuf, C.int(len(dest)), C.COMPLEX64, C.int(fmProc), cm.comm), "GatherC64")
}
